#!/usr/bin/env bash
# Copyright (C) 2018 Raphiel Rollerscaperers (raphielscape)
# SPDX-License-Identifier: GPL-3.0-or-later

# tput colormap
BLACK="0"
GREEN="2"
CYAN="6"
RED="1"
PURPLE="5"
LIGHTGRAY="8"
DARKGRAY="233"
LIGHTBLUE="33"
LIGHTGREEN="10"
LIGHTCYAN="51"
LIGHTRED="198"
LIGHTPURPLE="92"
YELLOW="11"
WHITE="15"

# Alias echo as teller
function echo() {
  command echo -e "${@}"
}

function bold() {
  command tput bold
}

function colorize() {
  command tput setaf "${@}"
}

function decolorize() {
  command tput sgr0
}

# Colorize errors
function display_error() {
    echo
    echo "$(tputaf ${RED})${1}$(tputz)"
    [[ -z ${2} ]] && echo
}

# Throw errors in red
function die() {
    display_error "${@}"
    exit
}

# Header colorizer
function header() {
    if [[ -n ${2} ]]; then
        COLOR=${2}
    else
        COLOR=${RED}
    fi
    colorize "${COLOR}"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    # SC2034: i appears unused. Verify it or export it.
    # shellcheck disable=SC2034
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    decolorize
}

# Header Announce
header "COMPILATION STARTED" "${GREEN}"

# Default configurations

# For ccache (ANGERY)
export PATH="/usr/lib/ccache/bin/:$PATH"

# Sourcedir
export SRCDIR="${KERNELDIR}"
export OUTDIR="${KERNELDIR}/out"

# A little mantra for MIUI build
branch="$(echo $(git rev-parse --abbrev-ref HEAD))"

if [[ ${branch} == miui-new ]]; then
  header "You're working with MehUI now, feel the meme ahead" "$GREEN"
    export branch="MIUI"
fi

# AnyKernel and Aroma Location
if [[ ${WORKER} == raphielbox ]]; then
    export ANYKERNEL="${WORKDIR}/AnyKernel2"
else
    export ANYKERNEL="${KERNELDIR}/chewy/aroma/anykernel"
fi

# Modules boi
if [[ ${branch} == MIUI ]]; then
    export MODULES="${HOME}/working/AnyKernel2/modules/system/lib/modules"
fi

# Delett Old AnyKernel in Aroma dir if exists
rm -rf ${ANYKERNEL_DONE}

export ARCH="arm64"
export SUBARCH="arm64"

# Identifier
if [[ ${WORKER} == semaphore ]]; then
  export KBUILD_BUILD_USER="ReVaNtH_StRaKz"
  export KBUILD_BUILD_HOST="PaNdA_MiSSiOn"
fi

# Where's my damn Toolchain if it's Semaphore?
if [[ ${WORKER} == semaphore ]]; then
    export TOOLCHAIN="${HOME}/GNU/GCC"
fi

# Wot is my defconfig?
export DEFCONFIG="strakz_defconfig"

# Where will the zip go?
if [[ ${WORKER} == semaphore ]]; then
    export ZIP_DIR="${KERNELDIR}/chewy/files"
else
    export ZIP_DIR="${HOME}/working/weeb_zip"
fi

# Image result
if [[ ${branch} == MIUI ]]; then
  export IMAGE="${OUTDIR}/arch/${ARCH}/boot/Image.gz-dtb"
else
  export IMAGE="${OUTDIR}/arch/${ARCH}/boot/Image.gz"
fi

# DTB Locations
export DTB=msm8953-qrd-sku3-mido
export DTB_T=${DTB}-treble.dtb
export DTB_NT=${DTB}-nontreble.dtb
export DTB_TREBLE="${OUTDIR}/arch/${ARCH}/boot/dts/qcom/${DTB_T}"
export DTB_NONTREBLE="${OUTDIR}/arch/${ARCH}/boot/dts/qcom/${DTB_NT}"

# When it's Clang, do rolls
if [[ ${CC} == Clang ]]; then
    header "We're building Clang bois" "${GREEN}"

    # Clang configurations
    export CLANG_TCHAIN="clang"
    export TCHAIN_PATH="aarch64-linux-gnu-"
    export CLANG_TRIPLE="aarch64-linux-gnu-"

    # Kbuild Sets
    export KBUILD_COMPILER_STRING="$(${CLANG_TCHAIN} --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')";
    export CROSS_COMPILE="${TCHAIN_PATH}"

    # Export the make
    export MAKE="make O=${OUTDIR} CC=clang"

    # Scream out the Clang compiler used
    header "Using toolchain: $(${CLANG_TCHAIN} --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"
else
    # We're using GCC, So throw normal make script
    export MAKE="make O=${OUTDIR}"
fi

# Caster configurations

# Messageworks
if [[ ${CC} == Clang ]]; then
MSG="I'm working with Clang at commit $(git log --pretty=format:'%h : %s' -1) Under $(hostname)"
else
MSG="I'm working with GCC at commit $(git log --pretty=format:'%h : %s' -1) Under $(hostname)"
fi

# Technical difficultiescast file Location
BOI="$(cat ${HOME}/working/scripts/techdiff)"

# Memes
MAIN="-1001371047577"
BUILD="-1001153251064"
STICKER="CAADBAADNwADp8uuGBHV2tl40w7WAg"

# Dropbox Thrower
function transfer() {
    zipname="$(echo $1 | awk -F '/' '{print $NF}')";
      url="$(bash $KERNELDIR/chewy/scripts/dropbox_uploader.sh upload $1 /megalovania)";
        printf '\n';
        echo "Download ${zipname} at ${url}";
}

# Push to Channel
function push() {
    curl -F document=@"${ZIP_DIR}/$ZIPNAME" "https://api.telegram.org/bot$BOT_API_KEY/sendDocument" \
         -F chat_id="-1001153251064"
}

# Send the Astolfo FTW Sticker
function tg_sendstick() {
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendSticker" \
         -d sticker="${STICKER}" \
         -d chat_id=${BUILD} >> /dev/null
}

# Send the info up
function tg_sendinfo() {
    curl -s "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" \
         -d "parse_mode=markdown" \
         -d text="${1}" \
         -d chat_id=${MAIN} \
         -d "disable_web_page_preview=true"
}

function techdiff() {
    curl -s "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" \
         -d "parse_mode=markdown" \
         -d text="${BOI}" \
         -d chat_id=${MAIN} \
         -d "disable_web_page_preview=true"
}

# Report progress to Channelcast
function tg_channelcast() {
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" \
         -d "parse_mode=markdown" \
         -d text="${1}" \
         -d chat_id=${BUILD} >> /dev/null
}


# Whenever build is interrupted by purpose, report it
trap '{
    tg_intstick
    tg_intstickmain
    exit 130
}' INT

# Interruption Happen, report with sticker
function tg_intstick() {
    curl -s -X POST https://api.telegram.org/bot$BOT_API_KEY/sendSticker \
         -d sticker="CAADAQADFQADlS0LHvIFwsaTaVjGAg" \
         -d chat_id=${BUILD} >> /dev/null
}

function tg_intstickmain() {
    curl -s -X POST https://api.telegram.org/bot$BOT_API_KEY/sendSticker \
         -d sticker="CAADAQADFQADlS0LHvIFwsaTaVjGAg" \
         -d chat_id=${MAIN} >> /dev/null
}

# Whenever errors occured, report them
function tg_senderror() {
    tg_sendinfo "$(echo "Build Throwing Error(s)\n*put my regular badwords here*")"
    tg_channelcast "$(echo "Build Throwing Error(s)\nBangsat...")"
    [[ ! -z ${STATUS} ]] && \
    exit ${STATUS} || \
    exit 1
}

# Announce the completion
function tg_yay() {
    tg_sendinfo "$(echo "Compilation Completed yay!~\n@raphielscape Will you give me cookies?")"
    tg_channelcast "$(echo "Compilation Completed yay!~\nAnd I will got cookies!")"
}

# Fin Prober
function fin() {
    header "Yay! My works took $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) seconds.~"
    tg_sendinfo "$(echo "Build took $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) seconds.")"
    tg_yay
}

# Toolchain Checks (GCC)
function check_gcc_toolchain() {
    export TC="$(find ${TOOLCHAIN}/bin -type f -name *-gcc)"
  if [[ -f "${TC}" ]]; then
    export CROSS_COMPILE="${TOOLCHAIN}/bin/$(echo ${TC} | \
        awk -F '/' '{print $NF'} | \
        sed -e 's/gcc//')"
    echo "Using toolchain: $(${CROSS_COMPILE}gcc --version | head -1)";
  else
    echo "No suitable toolchain found in ${TOOLCHAIN}"
    tg_senderror
    exit 1;
  fi
}

# Errored Prober
function finerr() {
    header "My works took $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) seconds but it's error..."
    tg_sendinfo "$(echo -e "Build took $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) seconds\nbut it's error...")"
    tg_senderror
    exit 1
}

# Some Relatable Aliases
function copy() {
  command cp -vR "${@}"
}

function delett() {
  command rm -vrf "${@}"
}
